@startuml
skin rose
autonumber

actor Customer
participant "Marketplace Frontend" as FRONT
participant "Marketplace API Gateway" as API
participant "Cart Service" as CART
participant "Order Service" as ORDER
participant "Payment Service" as PAYMENT
participant "Notification Service" as NOTIFY
participant "Delivery Service" as DELIVERY
database "PostgreSQL" as DB
participant "Stripe Connect" as STRIPE
participant "Seller 1 (API or Dashboard)" as SELLER1
participant "Seller 2 (API or Dashboard)" as SELLER2

== Add products to cart ==
Customer -> FRONT: Add product from Seller 1 and Seller 2
FRONT -> API: POST /cart { product_id, quantity }

API -> CART: Add product to user cart
CART -> DB: BEGIN TRANSACTION
CART -> DB: SELECT * FROM cart_items WHERE customer_id=? AND product_id=?
alt Product already in cart
    DB -> DB: UPDATE cart_items SET quantity = quantity + ? WHERE product_id=?
else New product
    DB -> DB: INSERT INTO cart_items (customer_id, product_id, quantity)
end
CART -> DB: COMMIT
CART --> API: Cart updated
API --> FRONT: 201 Created + cart summary

== Checkout ==
Customer -> FRONT: Click "Checkout"
FRONT -> API: POST /checkout
API -> CART: Get cart grouped by seller
CART -> DB: SELECT * FROM cart_items WHERE customer_id=...
DB --> CART: Grouped items
CART --> API: Grouped cart response

API -> ORDER: Create sub-orders
ORDER -> DB: BEGIN TRANSACTION
DB -> DB: INSERT INTO orders (customer_id, total_amount, status='pending')
DB -> DB: INSERT INTO sub_orders (order_id, seller_id, status='pending')
DB -> DB: INSERT INTO order_items (sub_order_id, product_id, quantity, price)
ORDER -> DB: COMMIT
ORDER --> API: Order IDs

== Payment ==
API -> PAYMENT: Init Stripe split payment
PAYMENT -> STRIPE: Create PaymentIntent (with seller splits)
STRIPE --> PAYMENT: client_secret
PAYMENT --> API: payment_link
API --> FRONT: Render Stripe payment form

== Payment success (Stripe webhook) ==
Customer -> STRIPE: Complete payment
STRIPE --> PAYMENT: webhook /payment_succeeded
PAYMENT -> ORDER: Mark order as paid
ORDER -> DB: BEGIN TRANSACTION
DB -> DB: UPDATE orders SET status='paid'
DB -> DB: UPDATE sub_orders SET status='paid'
ORDER -> DB: COMMIT

ORDER -> NOTIFY: Notify sellers
NOTIFY -> SELLER1: POST /orders/new
NOTIFY -> SELLER2: POST /orders/new

ORDER -> DELIVERY: Create deliveries
DELIVERY -> DB: INSERT INTO deliveries (sub_order_id, status='new')
DELIVERY --> ORDER: Tracking info
ORDER --> API: Order confirmation
API --> FRONT: Show order success

== Order cancellation (partial) ==
Customer -> FRONT: Cancel sub-order from Seller 1
FRONT -> API: POST /orders/{sub_id}/cancel
API -> ORDER: Cancel sub-order
ORDER -> DB: BEGIN TRANSACTION
DB -> DB: UPDATE sub_orders SET status='cancelled'
ORDER -> PAYMENT: Refund sub-order
PAYMENT -> STRIPE: POST /refunds (amount, sub_account=Seller1)
STRIPE --> PAYMENT: Refund success
ORDER -> DB: INSERT INTO refunds (sub_order_id, amount)
ORDER -> DB: COMMIT

ORDER -> NOTIFY: Notify Seller 1
NOTIFY -> SELLER1: POST /orders/cancelled
ORDER -> DELIVERY: Cancel delivery
DELIVERY -> DB: UPDATE deliveries SET status='cancelled'
DELIVERY --> ORDER: OK
ORDER --> API: Cancel confirmed
API --> FRONT: Partial refund confirmed

== Stripe Payout ==
STRIPE -> SELLER2: Transfer funds for completed sub-order

@enduml