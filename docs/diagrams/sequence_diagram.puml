@startuml
'──────────────────  STYLE  ──────────────────
skin rose
autonumber

'──────────────────  PARTICIPANTS  ───────────
actor Customer
participant "Frontend SPA / Mobile"       as FRONT
participant "Marketplace API" as API
participant Stripe
actor Seller

'═════════════════════════════════════════════
== 1. Add item to cart ==
Customer -> FRONT : Click “Add to Cart”
FRONT    -> API   : POST /api/cart/add\n⇢ CartHandler.AddItemToCart()
note right of API
calls\nCartService.AddItem → CartUseCase.AddItem → CartRepo.AddItem
end note
API --> FRONT : 200 OK  (item added)

'═════════════════════════════════════════════
== 2. Checkout (create order + Stripe session) ==
Customer -> FRONT : Check out
FRONT    -> API   : POST /api/orders/checkout\n⇢ OrderHandler.Checkout()
API --> API : OrderService.Checkout()\n• OrderUsecase.Checkout()\n• PaymentService.CreateCheckoutSession()
API --> FRONT : 200 OK  {payment_url}

'═════════════════════════════════════════════
== 3. Stripe payment webhook ==
Stripe  -> API : POST /api/webhook/stripe\n⇢ StripeWebhookHandler.HandleWebhook()
API  --> API : OrderService.UpdatePaymentStatusByIntent()

'═════════════════════════════════════════════
== 4. Seller processes item ==
Seller -> FRONT : change status (e.g. “shipped”)
FRONT  -> API   : PATCH /api/orders/items/{id}/status\n⇢ OrderHandler.UpdateOrderItemStatus()
API --> FRONT : 200 OK

'═════════════════════════════════════════════
== 5. Customer requests refund ==
Customer -> FRONT : request refund
FRONT    -> API   : POST /api/refunds/{item_id}\n⇢ RefundHandler.Request()
API --> FRONT : 201 Created {refund_id}

'═════════════════════════════════════════════
== 6. Seller approves / rejects refund ==
Seller  -> FRONT : approve / reject
FRONT   -> API   : PATCH /api/refunds/{refund_id}?action=approve|reject\n⇢ RefundHandler.Decide()
API --> FRONT : 200 OK  (status updated)

@enduml